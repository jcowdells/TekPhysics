#version 330 core

layout (points) in;
layout (triangle_strip, max_vertices = 36) out;

in VS_OUT {
    vec3 position;
    vec3 half_extents;
    vec3 axes[3];
} vs_out[];

out vec4 g_color;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

void emitTriangle(vec3 vertices[8], int a, int b, int c) {
    vec3 normal = normalize(cross(vertices[b] - vertices[a], vertices[c] - vertices[a]));
    g_color = vec4(normal, 1.0);

    gl_Position = projection * view * model * vec4(vertices[a], 1.0f);
    EmitVertex();
    gl_Position = projection * view * model * vec4(vertices[b], 1.0f);
    EmitVertex();
    gl_Position = projection * view * model * vec4(vertices[c], 1.0f);
    EmitVertex();
    EndPrimitive();
}

void main() {
    vec3 vertices[8];
    for (int i = 0; i < 8; i++) {
        vertices[i] = vec3(vs_out[0].position);
    }
    for (int x = 0; x < 2; x++) {
        for (int y = 0; y < 2; y++) {
            for (int z = 0; z < 2; z++) {
                int index = x + 2*y + 4*z;
                if (x == 1) {
                    vertices[index] += vs_out[0].half_extents.x * vs_out[0].axes[0];
                } else {
                    vertices[index] -= vs_out[0].half_extents.x * vs_out[0].axes[0];
                }
                if (y == 1) {
                    vertices[index] += vs_out[0].half_extents.y * vs_out[0].axes[1];
                } else {
                    vertices[index] -= vs_out[0].half_extents.y * vs_out[0].axes[1];
                }
                if (z == 1) {
                    vertices[index] += vs_out[0].half_extents.z * vs_out[0].axes[2];
                } else {
                    vertices[index] -= vs_out[0].half_extents.z * vs_out[0].axes[2];
                }
            }
        }
    }

    emitTriangle(vertices, 0, 1, 3);
    emitTriangle(vertices, 0, 3, 2);
    emitTriangle(vertices, 0, 2, 6);
    emitTriangle(vertices, 0, 6, 4);
    emitTriangle(vertices, 0, 4, 5);
    emitTriangle(vertices, 0, 5, 1);
    emitTriangle(vertices, 7, 5, 4);
    emitTriangle(vertices, 7, 4, 6);
    emitTriangle(vertices, 7, 6, 2);
    emitTriangle(vertices, 7, 2, 3);
    emitTriangle(vertices, 7, 3, 1);
    emitTriangle(vertices, 7, 1, 5);
}
