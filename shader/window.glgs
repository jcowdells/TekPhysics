#version 330 core

layout (points) in;
layout (triangle_strip, max_vertices = 6) out;

in VS_OUT {
    vec2 minmax_x;
    vec2 minmax_y;
    vec2 minmax_ix;
    vec2 minmax_iy;
    vec4 bg_colour;
    vec4 bd_colour;
} vs_out[];

out vec4 bg_colour;
out vec4 bd_colour;

out vec2 minmax_ix;
out vec2 minmax_iy;
out vec2 frag_pos;

void emitTriangle(vec2 vertices[4], int a, int b, int c) {
    gl_Position = vec4(vertices[a], 0.0f, 1.0f);
    frag_pos = vertices[a];
    EmitVertex();
    gl_Position = vec4(vertices[b], 0.0f, 1.0f);
    frag_pos = vertices[b];
    EmitVertex();
    gl_Position = vec4(vertices[c], 0.0f, 1.0f);
    frag_pos = vertices[c];
    EmitVertex();
    EndPrimitive();
}

void main() {
    vec2 vertices[4];

    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            if (i == 0) {
                vertices[i + 2 * j].x = vs_out[0].minmax_x.x;
            } else {
                vertices[i + 2 * j].x = vs_out[0].minmax_x.y;
            }
            if (j == 0) {
                vertices[i + 2 * j].y = vs_out[0].minmax_y.x;
            } else {
                vertices[i + 2 * j].y = vs_out[0].minmax_y.y;
            }
        }
    }

    bg_colour = vs_out[0].bg_colour;
    bd_colour = vs_out[0].bd_colour;

    minmax_ix = vs_out[0].minmax_ix;
    minmax_iy = vs_out[0].minmax_iy;

    emitTriangle(vertices, 0, 1, 2);
    emitTriangle(vertices, 1, 3, 2);
}